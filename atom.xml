<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>One night in cs</title>
  
  
  <link href="/1night-cs/atom.xml" rel="self"/>
  
  <link href="https://handsome-feng.github.io/1night-cs/"/>
  <updated>2020-03-11T13:25:33.232Z</updated>
  <id>https://handsome-feng.github.io/1night-cs/</id>
  
  <author>
    <name>handsome_feng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/irssi/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/irssi/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>autoconf</title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/autoconf/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/autoconf/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <content type="html"><![CDATA[<p>The configuration scripts produced by Autoconf are independent of Autoconf when they are run, so their users do not need to have Autoconf. </p><p>Autoconf requirements_x000D_     AC_INIT(package, version, bug-report-address)<em>x000D</em>     information on the package_x000D_     checks for programs_x000D_     checks for libraries_x000D_     checks for header files_x000D_     checks for types_x000D_     checks for structures_x000D_     checks for compiler characteristics_x000D_     checks for library functions_x000D_     checks for system services_x000D_     AC_CONFIG_FILES([file…])<em>x000D</em>     AC_OUTPUT</p><p> if you want the package to use a configuration header file, you must add a call to AC_CONFIG_HEADERS</p><p>When using autoscan to maintain a configure.ac, simply consider adding its suggestions. The file autoscan.log contains detailed information on why a macro is requested.</p><h3 id="Using-ifnames-to-List-Conditionals"><a href="#Using-ifnames-to-List-Conditionals" class="headerlink" title="Using ifnames to List Conditionals"></a><strong>Using ifnames to List Conditionals</strong></h3><p>. If you give autoconf an argument, it reads that file instead of configure.ac and writes the configuration script to the standard output instead of to configure. If you give autoconf the argument -, it reads from the standard input instead of configure.ac and writes the configuration script to the standard output.</p><p>Some of the files are distributed with Autoconf; autoconf reads them first. Then it looks for the optional file acsite.m4 in the directory that contains the distributed Autoconf macro files, and for the optional file aclocal.m4 in the current directory. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The configuration scripts produced by Autoconf are independent of Autoconf when they are run, so their users do not need to have Autoconf
      
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/git/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/git/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt;</span><br><span class="line">git remote -v</span><br><span class="line">git remote add origin-gitlab git@salsa.debian.org:handsome_feng-guest/ukui-session-manager.git</span><br><span class="line">git push origin-gitlab debian:master</span><br><span class="line">git cherry-pick &lt;commit-id&gt;</span><br><span class="line">git cherry-pick &lt;start-commit-id&gt;..&lt;end-commit-id&gt;</span><br><span class="line">git submodule update --init</span><br><span class="line">git revert &lt;commit-id&gt;</span><br><span class="line">git reset</span><br></pre></td></tr></table></figure><p>将本地debian分支推送到远程origin-debian的master分支：</p><p><code>git push origin-debain debian:master</code></p><p>删除本地分支：</p><p><code>git branch -d &lt;branchName&gt;</code></p><p>删除远程分支：</p><p><code>git push origin --delete &lt;branchName&gt;</code></p><p>切换分支：</p><p><code>git checkout -b debian remotes/origin/debian</code></p><h4 id="合并某个分支的特定文件："><a href="#合并某个分支的特定文件：" class="headerlink" title="合并某个分支的特定文件："></a>合并某个分支的特定文件：</h4><p><code>git checkout [branch]  [file name]</code></p><h4 id="合并两个分支"><a href="#合并两个分支" class="headerlink" title="合并两个分支"></a>合并两个分支</h4><p><code>git remote add new-origin git@github.com:handsome-feng/new.git</code></p><p><code>git merge new-origin/master --allow-unreleated-histories</code></p><h4 id="删除某个commit"><a href="#删除某个commit" class="headerlink" title="删除某个commit"></a>删除某个commit</h4><p><code>git rebase -i previous_commit</code></p><h3 id="bzr-to-git"><a href="#bzr-to-git" class="headerlink" title="bzr to git"></a>bzr to git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cp -pr repo-dir repo-dir_backup                 # Make a backup</span><br><span class="line">cd repo-dir                                     # Change into your dir</span><br><span class="line">git init                                        # Initialise a new git repo</span><br><span class="line">bzr fast-export --plain . | git fast-import     # Do the actual conversion</span><br><span class="line">git co -f master                                # Will reply &apos;Already on master&apos;</span><br><span class="line">rm -rf .bzr/                                    # Remove the bzr data</span><br></pre></td></tr></table></figure><h3 id="Removing-files-from-Git-history"><a href="#Removing-files-from-Git-history" class="headerlink" title="Removing files from Git history"></a>Removing files from Git history</h3><p><code>$ java -jar bfg.jar --delete-folders .git --delete-files .git --no-blob-protection my-repo.git</code></p><h2 id="git使用代理"><a href="#git使用代理" class="headerlink" title="git使用代理"></a>git使用代理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置代理</span></span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取消代理</span></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>GPG</title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/gpg/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/gpg/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://wiki.debian.org/Keysigning" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.debian.org/Keysigning</a></p><h3 id="Create-key"><a href="#Create-key" class="headerlink" title="Create key"></a>Create key</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; ~/.gnupg/gpg.conf &lt;&lt;EOF</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> personal-digest-preferences SHA256</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> cert-digest-algo SHA256</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> EOF</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gpg --full-generate-key</span></span><br></pre></td></tr></table></figure><p>private key: </p><ul><li>decrypt emails sent to you</li><li>digitally sign emails</li></ul><p>public key:</p><ul><li>send you encrypted mail</li><li>verify emails you send.</li></ul><p>revocation certificate:</p><p>What happens if you lose access to a secret <a href="https://ssd.eff.org/en/glossary/key" rel="external nofollow noopener noreferrer" target="_blank">key<img src="https://ssd.eff.org/sites/all/themes/ssd/img/info.png" alt="img"></a>, or it stops being secret? A <a href="https://ssd.eff.org/en/glossary/revocation-certificate" rel="external nofollow noopener noreferrer" target="_blank">revocation certificate<img src="https://ssd.eff.org/sites/all/themes/ssd/img/info.png" alt="img"></a> is a file that you can generate that announces that you no longer trust that key. You generate it when you still have the secret key, and keep it for any future disaster.</p><h3 id="replacing-keys"><a href="#replacing-keys" class="headerlink" title="replacing keys"></a>replacing keys</h3><p><a href="https://keyring.debian.org/" rel="external nofollow noopener noreferrer" target="_blank">https://keyring.debian.org/</a></p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p><a href="https://help.ubuntu.com/community/GnuPrivacyGuardHowto" rel="external nofollow noopener noreferrer" target="_blank">https://help.ubuntu.com/community/GnuPrivacyGuardHowto</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://wiki.debian.org/Keysigning&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://wiki.debian.org/Keysigni
      
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexchat</title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/hexchat/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/hexchat/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <content type="html"><![CDATA[<p>Q: How to avoid ‘’No ping reply for %d seconds”</p><p>A: /set net_ping_timeout 0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Q: How to avoid ‘’No ping reply for %d seconds”&lt;/p&gt;
&lt;p&gt;A: /set net_ping_timeout 0&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/regex/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/regex/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <content type="html"><![CDATA[<p>vim如何用正则表达式把数字换成相同长度的空格</p><p>:%s/\d/ /g</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vim如何用正则表达式把数字换成相同长度的空格&lt;/p&gt;
&lt;p&gt;:%s/\d/ /g&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>scrcpy</title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/scrcpy/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/scrcpy/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Genymobile/scrcpy" rel="external nofollow noopener noreferrer" target="_blank">Home page</a></p><h3 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h3><table><thead><tr><th>Action</th><th>Shortcut</th><th>Shortcut (macOS)</th></tr></thead><tbody><tr><td>Switch fullscreen mode</td><td><code>Ctrl</code>+<code>f</code></td><td><code>Cmd</code>+<code>f</code></td></tr><tr><td>Resize window to 1:1 (pixel-perfect)</td><td><code>Ctrl</code>+<code>g</code></td><td><code>Cmd</code>+<code>g</code></td></tr><tr><td>Resize window to remove black borders</td><td><code>Ctrl</code>+<code>x</code> | <em>Double-click¹</em></td><td><code>Cmd</code>+<code>x</code> | <em>Double-click¹</em></td></tr><tr><td>Click on <code>HOME</code></td><td><code>Ctrl</code>+<code>h</code> | <em>Middle-click</em></td><td><code>Ctrl</code>+<code>h</code> | <em>Middle-click</em></td></tr><tr><td>Click on <code>BACK</code></td><td><code>Ctrl</code>+<code>b</code> | <em>Right-click²</em></td><td><code>Cmd</code>+<code>b</code> | <em>Right-click²</em></td></tr><tr><td>Click on <code>APP_SWITCH</code></td><td><code>Ctrl</code>+<code>s</code></td><td><code>Cmd</code>+<code>s</code></td></tr><tr><td>Click on <code>MENU</code></td><td><code>Ctrl</code>+<code>m</code></td><td><code>Ctrl</code>+<code>m</code></td></tr><tr><td>Click on <code>VOLUME_UP</code></td><td><code>Ctrl</code>+<code>↑</code> <em>(up)</em></td><td><code>Cmd</code>+<code>↑</code> <em>(up)</em></td></tr><tr><td>Click on <code>VOLUME_DOWN</code></td><td><code>Ctrl</code>+<code>↓</code> <em>(down)</em></td><td><code>Cmd</code>+<code>↓</code> <em>(down)</em></td></tr><tr><td>Click on <code>POWER</code></td><td><code>Ctrl</code>+<code>p</code></td><td><code>Cmd</code>+<code>p</code></td></tr><tr><td>Power on</td><td><em>Right-click²</em></td><td><em>Right-click²</em></td></tr><tr><td>Turn device screen off (keep mirroring)</td><td><code>Ctrl</code>+<code>o</code></td><td><code>Cmd</code>+<code>o</code></td></tr><tr><td>Expand notification panel</td><td><code>Ctrl</code>+<code>n</code></td><td><code>Cmd</code>+<code>n</code></td></tr><tr><td>Collapse notification panel</td><td><code>Ctrl</code>+<code>Shift</code>+<code>n</code></td><td><code>Cmd</code>+<code>Shift</code>+<code>n</code></td></tr><tr><td>Copy device clipboard to computer</td><td><code>Ctrl</code>+<code>c</code></td><td><code>Cmd</code>+<code>c</code></td></tr><tr><td>Paste computer clipboard to device</td><td><code>Ctrl</code>+<code>v</code></td><td><code>Cmd</code>+<code>v</code></td></tr><tr><td>Copy computer clipboard to device</td><td><code>Ctrl</code>+<code>Shift</code>+<code>v</code></td><td><code>Cmd</code>+<code>Shift</code>+<code>v</code></td></tr><tr><td>Enable/disable FPS counter (on stdout)</td><td><code>Ctrl</code>+<code>i</code></td><td><code>Cmd</code>+<code>i</code></td></tr></tbody></table><p><em>¹Double-click on black borders to remove them.</em><br><em>²Right-click turns the screen on if it was off, presses BACK otherwise.</em></p><p>QA: Mouse/keyboard didn’t work.</p><p><img src="https://user-images.githubusercontent.com/10740043/37449656-0693071e-2866-11e8-86f9-50dec962dd67.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/Genymobile/scrcpy&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Home page&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Shor
      
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/screen/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/screen/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <content type="html"><![CDATA[<p>screen命令可以实现当前窗口与任务分离，我们即使离线了，服务器仍在后台运行任务。当我们重新登录服务器，可以读取窗口线程，重新连接任务窗口。</p><p>创建新窗口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen</span><br><span class="line">screen -S name</span><br><span class="line">screen command</span><br></pre></td></tr></table></figure><p>分离</p><p>ctrl a+d</p><p>screen -d name</p><p>恢复</p><p>screen -ls</p><p>screen -r</p><p>杀死</p><p>ctrl a+k</p><p>ctrl a ，输入quit</p><p>清理窗口</p><p>screen -wipe</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;screen命令可以实现当前窗口与任务分离，我们即使离线了，服务器仍在后台运行任务。当我们重新登录服务器，可以读取窗口线程，重新连接任务窗口。&lt;/p&gt;
&lt;p&gt;创建新窗口&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/ssh/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/ssh/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <content type="html"><![CDATA[<p>1.限制用户登录：</p><p>/etc/ssh/sshd_config：</p><p>AllowUsers    user1 <a href="mailto:user2@192.168.1.1" rel="external nofollow noopener noreferrer" target="_blank">user2@192.168.1.1</a>              </p><p>DenyUsers    user3 user4 </p><ol start="2"><li><p>限制 IP登录</p><p>通过设置 /etc/hosts.allow 和 /etc/hosts.deny 这个两个文件</p><ol><li>/etc/hosts.allow：</li></ol></li></ol><p>sshd:192.168.1.1:allow<br>sshd:192.168.1.1/24:allow</p><ol start="2"><li>/etc/hosts.allow：</li></ol><p>sshd:ALL # 允许全部的 ssh 登录 </p><p>hosts.allow &gt; hosts.deny (优先级)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.限制用户登录：&lt;/p&gt;
&lt;p&gt;/etc/ssh/sshd_config：&lt;/p&gt;
&lt;p&gt;AllowUsers    user1 &lt;a href=&quot;mailto:user2@192.168.1.1&quot; rel=&quot;external nofollow noopener nore
      
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/v2ray/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/v2ray/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <content type="html"><![CDATA[<p>服务器端:</p><ol><li>注册域名</li><li>注册cloudflare<ul><li>Add your site</li><li>添加域名解析记录，选择A记录，name填www，IPv4填写你的搬瓦工VPS的IP，云朵请点成灰色仅dns解析，先不使用CDN</li><li>提示修改Nameservers，并提供了两个域名服务器地址，在你的域名注册商那修改域名服务器即可</li><li>SSL设置为Full</li></ul></li><li>安装v2ray<ul><li>bash &lt;(curl -s -L <a href="https://git.io/v2ray.sh" rel="external nofollow noopener noreferrer" target="_blank">https://git.io/v2ray.sh</a>)</li><li>传输协议选择4:WebSocket+TLS</li><li>确认域名已经解析到vps地址，然后输入正确的域名</li><li>v2ray url生成vmess url链接，用户配置客户端</li></ul></li></ol><p>客户端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://install.direct/go.sh</span><br><span class="line">sudo bash go.sh</span><br></pre></td></tr></table></figure><p>将配置文件拷贝到/etc/v2ray/config.json</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start v2ray</span><br></pre></td></tr></table></figure><p>chromium –proxy-server=”socks5://127.0.0.1:1080”</p><p>终端代理：</p><ol><li>export（测试无效）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=127.0.0.1:1080</span><br><span class="line">export https_proxy=127.0.0.1:1080</span><br></pre></td></tr></table></figure><ol start="2"><li>Use proxychains:</li></ol><p>sudo proxychains apt update</p><p>vim /etc/proxychains.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line">socks5 127.0.0.1 1080</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;服务器端:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注册域名&lt;/li&gt;
&lt;li&gt;注册cloudflare&lt;ul&gt;
&lt;li&gt;Add your site&lt;/li&gt;
&lt;li&gt;添加域名解析记录，选择A记录，name填www，IPv4填写你的搬瓦工VPS的IP，云朵请点成灰色仅dns解析，先不使用
      
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>vim</title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/vim/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/vim/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Su-write"><a href="#Su-write" class="headerlink" title="Su-write"></a>Su-write</h1><p>If you find you do not have permission to perform <code>:w</code>, use the following: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:w !sudo tee &quot;%&quot; &gt; /dev/null</span><br></pre></td></tr></table></figure><p>You can make a command so <code>:W</code> invokes sudo: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command W w !sudo tee &quot;%&quot; &gt; /dev/null</span><br></pre></td></tr></table></figure><p>Or, if you know about the problem beforehand: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudoedit path_to_file</span><br><span class="line">sudo -e path_to_file</span><br></pre></td></tr></table></figure><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>向下查找</p><p>/searchstring</p><p>向上查找</p><p>?searchstring</p><p>n N 重复上次查找</p><p>set incsearch</p><p>设置增量查找</p><p>set noincsearch</p><p>关闭增量查找</p><p>匹配以The开始的行</p><p>/^The</p><p>匹配以.结束的行</p><p>/.$</p><p>匹配任意linu开始的任意词</p><p>/linu. </p><p>匹配以abc结束的字</p><p>\abc&gt;</p><p>匹配以abc开始的字</p><p>&lt;abc</p><p>匹配以abc开始的任意字</p><p>\abc*</p><p>匹配除abc开头外的任意字</p><p>[^abc]</p><p>匹配任意字母和数字</p><p>/[a-aA-Z0-9]</p><p>显示当前文档及编辑信息</p><p>CTRL+G</p><h3 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h3><ol><li><p>打开文件并且分屏<br> <code>vim -o[n] file1 [file2 ...]</code><br> <code>vim -O[n] file1 [file2 ...]</code><br> 小写o是水平分屏,大写O是垂直分屏;中括号表示可有可无,n分屏的个数</p></li><li><p>在vim中的命令模式下分屏</p><p> a. 垂直分屏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:vs [file2]</span><br></pre></td></tr></table></figure><p> 垂直分屏,后面不跟文件名是将当前文件垂直分屏;跟文件名是将新文件在垂直分屏中打开(也可用 vsp或者vsplit代替vs) </p><blockquote><p>快捷键操作可以不学:<br> 垂直分屏的快捷键操作为:ctrl+w v(同时按下ctrl和w键后,松开再按v键:快捷键操作只可将当前文件分屏)</p></blockquote></li></ol><p>b.水平分屏<br> <code>:sv [file2]</code><br> 水平分屏,后面不跟文件名是将当前文件水平分屏;跟文件名是将新文件在水平分屏中打开(也可用 sp或者split代替sv)</p><blockquote><p>快捷键操作可以不学:<br> 水平的快捷键操作为:ctrl+w s(同时按下ctrl和w键后,松开再按s键:快捷键操作只可将当前文件分屏)</p></blockquote><p>c. 新建文件水平分屏<br> <code>:new [newfile]</code><br> 此命令会新建一个水平分屏<br> 如果跟有文件名则会新建一个文件,当写入内容并且保存退出后会新建该文件(如果没有写入内容保存退出也不会新建该文件);</p><blockquote><p>快捷键操作可以不学:<br> 新建文件水平分屏的快捷键操作为:ctrl+w n(同时按下ctrl和w键后,松开再按n键)<br> 如果没有跟文件名,在写入内容后保存时命令模式下输入:<br> <code>:w filename</code><br> 会新建一个名字为filename的文件</p></blockquote><ol><li><p>移动光标<br> a. 把光标移到右边的屏中<br> <code>ctrl+w l</code><br> b. 把光标移到左边的屏中<br> <code>ctrl+w h</code><br> c. 把光标移到上边的屏中<br> <code>ctrl+w k</code><br> d. 把光标移到下边的屏中<br> <code>ctrl+w j</code><br> e. 把光标移到下一个屏中<br> <code>ctrl+w w</code><br> f. 把光标移到上一个屏中<br> <code>ctrl+w p</code></p></li><li><p>移动分屏<br> a. 向右移动<br> <code>ctrl+w L</code><br> b. 向左移动<br> <code>ctrl+w H</code><br> c. 向上移动<br> <code>ctrl+w K</code><br> d. 向下移动<br> <code>ctrl+w J</code><br> e. 向下旋转窗口<br> <code>ctrl+w r</code><br> f. 向上旋转窗口<br> <code>ctrl+w R</code><br> g. 当前窗口与下一个窗口对调<br> <code>ctrl+w x</code></p></li><li><p>控制分屏的尺寸<br> a. 减少当前窗口高度（对上下分屏才有用）<br> <code>ctrl+w -</code>        <code>亲测字体大小会发生变化</code><br> b. 增加当前窗口高度（对上下分屏才有用）<br> <code>ctrl+w +</code>      <code>亲测字体大小会发生变化</code><br> c. 增加当前窗口宽度（对左右分屏才有用）<br> <code>ctrl+w &gt;</code>      <code>按完ctrl w 后松开,同时按下shift &gt;</code><br> d. 减少当前窗口宽度（对左右分屏才有用）<br> <code>ctrl+w &lt;</code>       <code>按完ctrl w 后松开,同时按下shift &lt;</code><br> e. 使所有窗口恢复均等<br> <code>ctrl+w =</code></p></li><li><p>关闭分屏<br> a. 关闭除当前分屏外的其他分屏<br> <code>:only</code><br> 快捷键操作</p><blockquote><p>快捷操作为:ctrl+w o(最后一个分屏不能用此快捷键关闭)</p></blockquote></li></ol><p>b. 关闭当前分屏<br> &gt;快捷操作为:ctrl+w c (最后一个分屏不能用此快捷键关闭)</p><p>c. 关闭当前分屏<br> &gt;快捷操作为:ctrl+w q (可用来关闭最后一个分屏)</p><p>d. 关闭所有分屏<br> <code>:qa</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Su-write&quot;&gt;&lt;a href=&quot;#Su-write&quot; class=&quot;headerlink&quot; title=&quot;Su-write&quot;&gt;&lt;/a&gt;Su-write&lt;/h1&gt;&lt;p&gt;If you find you do not have permission to perf
      
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/x2x/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/x2x/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <content type="html"><![CDATA[<p>x2x does exactly what you want:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -X othermachine x2x -west -to :0</span><br></pre></td></tr></table></figure><p>Now you can move your mouse to the left of your laptop and it wii appear in that other machine. Keyboard ‘goes’ there too.</p><p>You’ll need to enable X forwarding in that other machine’s sshd.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;x2x does exactly what you want:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/xdotool/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/xdotool/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <content type="html"><![CDATA[<p>xdotool getmouselocation </p><p>My extra for sequential clicking into a few positions is a file positions.txt (given by a few eval/echo runs):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">123 13</span><br><span class="line">423 243</span><br><span class="line">232 989</span><br></pre></td></tr></table></figure><p>And the code that uses it is:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">     X=`<span class="built_in">echo</span> <span class="variable">$line</span>| cut -c1-3`; </span><br><span class="line">     Y=`<span class="built_in">echo</span> <span class="variable">$line</span>| cut -c4-7`;</span><br><span class="line">     xdotool mousemove --sync $((  0.5 + <span class="variable">$X</span> )) $(( 0.5 + <span class="variable">$Y</span> ));</span><br><span class="line">     xdotool click 1</span><br><span class="line"><span class="keyword">done</span> &lt; positions.txt</span><br></pre></td></tr></table></figure><p>If there is no need to scale pixels (unlike my case), it could be a simple</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">     xdotool mousemove --sync <span class="variable">$line</span>;</span><br><span class="line">     xdotool click 1</span><br><span class="line"><span class="keyword">done</span> &lt; positions.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;xdotool getmouselocation &lt;/p&gt;
&lt;p&gt;My extra for sequential clicking into a few positions is a file positions.txt (given by a few eval/echo 
      
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/tools/xwd/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/tools/xwd/</id>
    <published>2020-03-11T13:25:33.232Z</published>
    <updated>2020-03-11T13:25:33.232Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xwd -out screenshot.xwd -root -display :0.0</span><br><span class="line">convert /tmp/screenshot.xwd /tmp/screenshot.png</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
    
      <category term="tools" scheme="https://handsome-feng.github.io/1night-cs/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Network</title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/linux/network/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/linux/network/</id>
    <published>2020-03-11T13:25:33.216Z</published>
    <updated>2020-03-11T13:25:33.216Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Unix-errno值"><a href="#Unix-errno值" class="headerlink" title="Unix errno值"></a>Unix errno值</h3><p>只要一个Unix函数中有错误发生,全局变量errno就被置为一个指明该错误类型的正值,函数本身则通常返回-1.</p><h3 id="网络拓扑的发现"><a href="#网络拓扑的发现" class="headerlink" title="网络拓扑的发现"></a>网络拓扑的发现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -ni //-i提供网络接口信息,-n标志输出数值地址</span><br><span class="line">$ netstat -nr // -r展示路由表</span><br><span class="line">$ ifconfig    // 获取各个接口详细信息</span><br></pre></td></tr></table></figure><p>找出本地网络众多主机的IP地址方法之一是针对本地接口的广播地址执行ping命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ping -b 192.168.255.255</span><br></pre></td></tr></table></figure><h3 id="tcp三次握手"><a href="#tcp三次握手" class="headerlink" title="tcp三次握手"></a>tcp三次握手</h3><p><img src="./pics/e92d0ebc-7d46-413b-aec1-34a39602f787.png" alt="三次握手"></p><p>####假设A为客户端,B为服务器端:</p><ol><li>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求.</li><li>A 向 B 发送连接请求报文段，SYN=1，ACK=0，选择一个初始的序号 x.</li><li>B 收到连接请求报文段，如果同意建立连接，则向A发送连接确认报文段，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y.</li><li>A 收到 B 的连接确认报文段后，还要向 B 发出确认，确认号为 y+1，序号为 x+1.</li><li>B 收到 A 的确认后，连接建立。</li></ol><p><strong>三次握手的原因</strong><br>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。<br>失效的连接请求是指，客户端发送的连接请求在网络中滞留，客户端因为没及时收到服务器端发送的连接确认，因此就重新发送了连接请求。滞留的连接请求并不是丢失，之后还是会到达服务器。如果不进行第三次握手，那么服务器会误认为客户端重新请求连接，然后打开了连接。但是并不是客户端真正打开这个连接，因此客户端不会给服务器发送数据，这个连接就白白浪费了。</p><h3 id="tcp四次挥手"><a href="#tcp四次挥手" class="headerlink" title="tcp四次挥手"></a>tcp四次挥手</h3><p><img src="./pics//f87afe72-c2df-4c12-ac03-9b8d581a8af8.jpg" alt></p><p>####以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为1.</p><ol><li>A 发送连接释放报文段，FIN=1。</li><li>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</li><li>当 B 不再需要连接时，发送连接释放请求报文段，FIN=1。</li><li>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2MSL 时间后释放连接。</li><li>B 收到 A 的确认后释放连接。</li></ol><p><strong>四次挥手的原因</strong><br>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p><p><strong>TIME_WAIT</strong><br>客户端（主动关闭的一端）接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间2MSL(最长分节生命期的2倍)。每个数据报有一个称为跳限(hop limit)的8位字段，最大值为255.<br>这么做有两个理由：</p><ol><li>可靠地实现TCP全双工连接的终止：<br>假设客户端最终的ACK丢失了，服务器将重新发送最终那个FIN，因此客户端必须维护状态信息，以便重新发送最终的那个ACK。</li><li>允许老的重复分节在网络中消逝：<br>等待一段时间是为了让本连接持续时间内所产生的所有报文段都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文段。</li></ol><p><strong>捎带</strong>：服务器对客户请求的确认时伴随其应答发送的，但是如果服务器耗时大于200ms，那么我们将看到先是确认后是应答。</p><h3 id="SCTP"><a href="#SCTP" class="headerlink" title="SCTP"></a>SCTP</h3><p>四路握手： 避免拒绝服务攻击</p><p><strong>端口号</strong></p><ol><li>0~1023    //众所周知的端口，有IANA(因特网已分配数值权威机构)分配和控制</li><li>1024~49151  //已登记的端口</li><li>49152～65535  //动态的或私用的(49152时65535的3/4)</li></ol><p>标识每个端点的两个值(IP地址和端口号)通常称为一个<strong>套接字</strong>。</p><p><strong>MSS:</strong><br>最大分节大小，用户向对端TCP通告对端在每个分节中能发送的最大TCP数据量。<br>通常设置为： MTU - IP首部固定长度 - TCP首部固定长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in_addr_r inet_addr(const char *strptr); //已废弃</span><br></pre></td></tr></table></figure><p>当出错时返回INADDR_NONE常值(32位均为1的值)，所以该函数不能处理255.255.255.255</p><p>若connect失败，则该套接字不可再用，必须关闭。<br><strong>值结果参数</strong></p><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h4 id="POST和GET请求方法的区别"><a href="#POST和GET请求方法的区别" class="headerlink" title="POST和GET请求方法的区别"></a>POST和GET请求方法的区别</h4><ol><li>参数：GET的参数以查询字符串出现在URL中，而POST的参数存储在内容尸体中。</li><li>安全：安全的HTTP方法不会改变服务器的状态，是只读的，GET方法是安全的，POST不是，POST的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，可能存储在服务器数据库中。</li><li>幂等性：幂等的HTTP方法，同样的请求被执行一次与连续多次的效果是一样的，服务器的状态也是一样的。GET,HEAD,PUT,DELETE是幂等的，POST不是。</li><li>可缓存：如果要对响应进行缓存，需要满足以下条件：<br>a. 请求报文的 HTTP 方法本身是可缓存的，包括 GET 和 HEAD，但是 PUT 和 DELETE 不可缓存，POST 在多数情况下不可缓存的。<br>b. 响应报文的状态码是可缓存的，包括：200, 203, 204, 206, 300, 301, 404, 405, 410, 414, and 501。<br>c. 响应报文的 Cache-Control 首部字段没有指定不进行缓存。</li></ol><p><strong>fork和exec函数</strong><br>父进程中调用fork之前打开的所有描述符在fork返回后由子进程分享。子进程接着读这个已连接套接字，父进程则关闭这个已连接套接字。<br>进程在调用exec之前打开着的描述符通常跨exec继续保持打开，但是可以使用fcntl设置FD_CLOEXEC描述符标志禁止掉。</p><p>描述符引用计数<br>引用计数大于0,则close调用并不引发TCP的四分组连接终止序列。<br>如果确实想在TCP连接上发送一个FIN,那么可以用shutdown函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -a -o pid,ppid,stat,args,wchan</span><br></pre></td></tr></table></figure><p>SIGKILL和SIGSTOP不能被捕获和忽略</p><p>如果一个信号在被阻塞期间产生了一次或多次，那么该信号在被解阻塞之后通常只递交一次，也就是说Unix信号默认时不排队的。</p><p>对于返回值为void的信号处理函数,依然使用return; 语句, 这样,当某个系统调用被我们编写的某个信号处理函数中断时,我们就可以得知改系统调用具体是被哪个信号处理函数的哪个return语句中断的.</p><p>当connect被一个捕获的信号中断而且不自动重启时,我们必须调用select来等待连接完成.</p><h3 id="二三层交换"><a href="#二三层交换" class="headerlink" title="二三层交换"></a>二三层交换</h3><h3 id="select函数"><a href="#select函数" class="headerlink" title="select函数"></a>select函数</h3><p>maxfdp1: 是待测试的最大描述符+1<br>如果readset, writeset, exceptset三个指针均为空，就有了一个比Unix的sleep函数更精确的定时器。</p><h3 id="recv使用过程中的问题"><a href="#recv使用过程中的问题" class="headerlink" title="recv使用过程中的问题"></a>recv使用过程中的问题</h3><h3 id="select最大并发量"><a href="#select最大并发量" class="headerlink" title="select最大并发量"></a>select最大并发量</h3><p>​p><p>应用层</p><p>运输层</p><p>网络层</p><p>链路层</p><p>网桥在<code>链路层</code>对网络进行互联</p><p>路由器在<code>网络层</code>对网络进行互联</p><p>5类互联网地址</p><p><code>grep telnet /etc/services</code></p><p>标准的服务端口号都是奇数，因为从NCP(单工，每个应用程序需要两个连接)端口号派生出来。</p><p>Internet: 世界范围内通过TCP/IP互相通信的所有主机集合</p><p>internet: 用一个共同的协议族把多个网络连接在一起</p><h2 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h2><p>SLIP: 串行线路IP</p><p>缺点：</p><ul><li>每一端必须知道对方的IP</li><li>数据帧中没有类型字段</li><li>没有在数据帧中加上校验和</li></ul><p>PPP: 点对点协议</p><p>环回接口</p><p>最大传输单元MTU</p><p>路径MTU</p><p><code>netstat -i</code></p><h2 id="IP-网际协议"><a href="#IP-网际协议" class="headerlink" title="IP: 网际协议"></a>IP: 网际协议</h2><p>使用源路由选项，IP地址可能被修改</p><h2 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h2><p>使用委托ARP的线索：同一个子网上的两台主机IP地址映射的硬件地址相同</p><h2 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h2><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>利用ICMP回显请求和回显报文，不用经过传输层(TCP/UDP)</p><h2 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h2><p>利用ICMP报文和IP首部中的TTL字段（生存周期），开始时，发送一个TTL字段为1的UDP数据报，然后将TTL字段每次加1，通过区分接收到的ICMP报文是超时还是端口不可达，以判断什么时候结束</p><h3 id="网络抓包"><a href="#网络抓包" class="headerlink" title="网络抓包"></a>网络抓包</h3><p>tcpdump   抓包<br>wireshark 分析抓到的包</p><h3 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h3><p><strong>ss 是 Socket Statistics 的缩写</strong>。ss 命令可以用来获取 socket 统计信息，它显示的内容和 netstat 类似。但 ss 的优势在于它能够显示更多更详细的有关 TCP 和连接状态的信息，而且比 netstat 更快。</p><p>常用选项:</p><p>-h, –help 帮助<br>-V, –version  显示版本号<br>-t, –tcp 显示 TCP 协议的 sockets<br>-u, –udp 显示 UDP 协议的 sockets<br>-x, –unix 显示 <strong>unix domain sockets</strong>，与 -f 选项相同<br>-n, –numeric 不解析服务的名称，如 “22” 端口不会显示成 “ssh”<br>-l, –listening 只显示处于监听状态的端口<br>-p, –processes 显示监听端口的进程(Ubuntu 上需要 sudo)<br>-a, –all 对 TCP 协议来说，<strong>既包含监听的端口，也包含建立的连接</strong><br>-r, –resolve 把 IP 解释为域名，把端口号解释为协议名称</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Unix-errno值&quot;&gt;&lt;a href=&quot;#Unix-errno值&quot; class=&quot;headerlink&quot; title=&quot;Unix errno值&quot;&gt;&lt;/a&gt;Unix errno值&lt;/h3&gt;&lt;p&gt;只要一个Unix函数中有错误发生,全局变量errno就被置为一个指明
      
    
    </summary>
    
    
      <category term="linux" scheme="https://handsome-feng.github.io/1night-cs/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/linux/sessionManager/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/linux/sessionManager/</id>
    <published>2020-03-11T13:25:33.216Z</published>
    <updated>2020-03-11T13:25:33.216Z</updated>
    
    <content type="html"><![CDATA[<p>Session Manager</p><ol><li><p>会话管理器是什么，什么作用</p></li><li><p>KDE/GNOME/Deepin</p></li><li><p>ukui-session-manager优势与劣势</p></li></ol><p>传统的 Linux 系统使用 ConsoleKit 跟踪用户登录情况，并决定是否赋予其关机的权限。现在 ConsoleKit 已经被 systemd 的 logind 所替代。</p><p>logind 不是 pid-1 的 init 进程。它的作用和 UpStart 的 session init 类似，但功能要丰富很多，它能够管理几乎所有用户会话(session)相关的事情。logind 不仅是 ConsoleKit 的替代，它可以：</p><ul><li>维护，跟踪会话和用户登录情况。如上所述，为了决定关机命令是否可行，系统需要了解当前用户登录情况，如果用户从 SSH 登录，不允许其执行关机命令；如果普通用户从本地登录，且该用户是系统中的唯一会话，则允许其执行关机命令；这些判断都需要 logind 维护所有的用户会话和登录情况。</li><li>Logind 也负责统计用户会话是否长时间没有操作，可以执行休眠/关机等相应操作。<br>为用户会话的所有进程创建 CGroup。这不仅方便统计所有用户会话的相关进程，也可以实现会话级别的系统资源控制。</li><li>负责电源管理的组合键处理，比如用户按下电源键，将系统切换至睡眠状态。</li><li>多席位(multi-seat) 管理。如今的电脑，即便一台笔记本电脑，也完全可以提供多人同时使用的计算能力。多席位就是一台电脑主机管理多个外设，比如两个屏幕和两个鼠标/键盘。席位一使用屏幕 1 和键盘 1；席位二使用屏幕 2 和键盘 2，但他们都共享一台主机。用户会话可以自由在多个席位之间切换。或者当插入新的键盘，屏幕等物理外设时，自动启动 gdm 用户登录界面等。所有这些都是多席位管理的内容。ConsoleKit 始终没有实现这个功能，systemd 的 logind 能够支持多席位。</li></ul><p>好的一点是，这非常有助于标准化 Linux 的管理！从前，不同的 Linux 发行版各行其事，使用不同方法管理系统，从来也不会互相妥协。比如如何将系统进入休眠状态，不同的系统有不同的解决方案，即便是同一个 Linux 系统，也存在不同的方法，比如一个有趣的讨论：如何让 ubuntu 系统休眠，可以使用底层的/sys/power/state 接口，也可以使用诸如 pm-utility 等高层接口。存在这么多种不同的方法做一件事情对像我这样的普通用户而言可不是件有趣的事情。systemd 提供统一的电源管理命令接口，这件事情的意义就类似全世界的人都说统一的语言，我们再也不需要学习外语了，多么美好！</p><p>X Session Management Protocol</p><p>The purpose of the X Session Management Protocol (XSMP) is to provide a uniform mechanism for users to save and restore their sessions. </p><p>A session is a group of clients, each of which has a particular state. </p><h3 id="Mate-Session-Manager"><a href="#Mate-Session-Manager" class="headerlink" title="Mate Session Manager"></a>Mate Session Manager</h3><p>require_dbus_session</p><p>gsm_util_export_activation_environment</p><p>gsm_util_export_user_environment</p><p>check_gl</p><p>XDG_CURRENT_DESKTOP=MATE</p><p>DISPLAY=gdk_display_get_name</p><p>MATE_DESKTOP_SESSION_ID=this-is-deprecated</p><p>initialize_gsettings</p><p>accessibility: GTK_MODULES=gail:atk-bridge</p><p>gsm_store_new</p><p>gsm_xsmp_server_new</p><p>acquire_name</p><p>msm_gnome_start() //gnome compat mode: keyring, smproxy</p><p>set_overlay_scroll</p><p>gsm_manager_new</p><p>mdm_signal_hander_new</p><p>load_standard_apps(初始化为autostart_app, add进client_store)</p><p>​    maybe_load_saved_session_apps</p><p>​    gsm_manager_add_autostart_apps_from_dir</p><p>​    append_default_app: ukui-settings-daemon</p><p>​    append_required_apps: dock, filemanager, panel, windowmanager</p><p>​    append_accessibility_apps: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">typedef enum &#123;</span><br><span class="line">    /* gsm&apos;s own startup/initialization phase */</span><br><span class="line">    GSM_MANAGER_PHASE_STARTUP = 0,</span><br><span class="line"></span><br><span class="line">    /* xrandr setup, mate-settings-daemon, etc */</span><br><span class="line">    GSM_MANAGER_PHASE_INITIALIZATION,</span><br><span class="line"></span><br><span class="line">    /* window/compositing managers */</span><br><span class="line">    GSM_MANAGER_PHASE_WINDOW_MANAGER,</span><br><span class="line"></span><br><span class="line">    /* apps that will create _NET_WM_WINDOW_TYPE_PANEL windows */</span><br><span class="line">    GSM_MANAGER_PHASE_PANEL,</span><br><span class="line"></span><br><span class="line">    /* apps that will create _NET_WM_WINDOW_TYPE_DESKTOP windows */</span><br><span class="line">    GSM_MANAGER_PHASE_DESKTOP,</span><br><span class="line"></span><br><span class="line">    /* everything else */</span><br><span class="line">    GSM_MANAGER_PHASE_APPLICATION,</span><br><span class="line"></span><br><span class="line">    /* done launching */</span><br><span class="line">    GSM_MANAGER_PHASE_RUNNING,</span><br><span class="line"></span><br><span class="line">    /* shutting down */</span><br><span class="line">    GSM_MANAGER_PHASE_QUERY_END_SESSION,</span><br><span class="line">    GSM_MANAGER_PHASE_END_SESSION,</span><br><span class="line">    GSM_MANAGER_PHASE_EXIT</span><br><span class="line">&#125; GsmManagerPhase;</span><br></pre></td></tr></table></figure><h3 id="KDE-ksmserver"><a href="#KDE-ksmserver" class="headerlink" title="KDE ksmserver"></a>KDE ksmserver</h3><ul><li><p>sanity_check(he(合理性检验)</p><p>HOME, ICEAUTHORITY, KDETMP/ice-unix(socket directory where X-windows session information is saved)</p></li><li><p>SESSION_MANAGER=</p></li><li><p>checkComposite()</p></li><li><p>QT_QPA_PLATFORM=xcb when launchpad ksmserver self</p></li><li><p>fcntl(ConnectionNumber(QX11Info::display()), F_SETFD, 1);</p></li><li><p>check_library_exists(ICE _IceTransNoListen “” HAVE__ICETRANSNOLISTEN)</p></li><li><p>setupShortcuts</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Session Manager&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;会话管理器是什么，什么作用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;KDE/GNOME/Deepin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ukui-session-manager优势与劣势&lt;/p&gt;
&lt;/li&gt;
&lt;/ol
      
    
    </summary>
    
    
      <category term="linux" scheme="https://handsome-feng.github.io/1night-cs/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/linux/sharedlibs/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/linux/sharedlibs/</id>
    <published>2020-03-11T13:25:33.216Z</published>
    <updated>2020-03-11T13:25:33.216Z</updated>
    
    <content type="html"><![CDATA[<p>The following command, when run on a shared library, will output the name to be used for the Debian package containing that shared library:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objdump -p /usr/lib/x86_64-linux-gnu/libGLU.so.1.3.1  \</span><br><span class="line">    | sed -n -e&apos;s/^[[:space:]]*SONAME[[:space:]]*//p&apos; \</span><br><span class="line">    | LC_ALL=C sed -r -e&apos;s/([0-9])\.so\./\1-/; s/\.so(\.|$)//; y/_/-/; s/(.*)/\L&amp;/&apos;</span><br></pre></td></tr></table></figure><p>It is recommended that supporting files and run-time support programs that do not need to be invoked manually by users, but are nevertheless required for the package to function, be placed (if they are binary) in a subdirectory of /usr/lib, preferably under /usr/lib/package-name. If the program or file is architecture independent, the recommendation is for it to be placed in a subdirectory of /usr/share instead, preferably under /usr/share/package-name. Following the package-name naming convention ensures that the file names change when the shared object version changes.</p><p>symbols files are therefore recommended for most shared library packages since they provide more accurate dependencies. For most C libraries, the additional detail required by symbols files is not too difficult to maintain. However, maintaining exhaustive symbols information for a C++ library can be quite onerous, so shlibs files may be more appropriate for most C++ libraries. Libraries with a corresponding udeb must also provide a shlibs file, since the udeb infrastructure does not use symbols files.</p><p>dpkg-shlibdeps<br>dpkg-shlibdeps will use a program like <strong>objdump</strong> or <strong>readelf</strong> to find the libraries and the symbols in those libraries directly needed by the binaries or shared libraries in the package.</p><p>The easiest way to call <code>dpkg-shlibdeps</code> correctly is to use a package helper framework such as debhelper. If you are using debhelper, the <code>dh_shlibdeps</code> program will do this work for you. It will also correctly handle multi-binary packages.</p><p>${shlibs:Depends}</p><h3 id="The-symbols-system"><a href="#The-symbols-system" class="headerlink" title="The symbols system"></a>The symbols system</h3><h3 id="The-shlibs-system"><a href="#The-shlibs-system" class="headerlink" title="The shlibs system"></a>The shlibs system</h3><p><a href="https://www.debian.org/doc/debian-policy/ch-sharedlibs.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.debian.org/doc/debian-policy/ch-sharedlibs.html</a></p><p>A shared library is identified by the <code>SONAME</code> attribute stored in its dynamic section.</p><p>When a binary is linked against a shared library, the <code>SONAME</code> of the shared library is recorded in the binary’s <code>NEEDED</code> section so that the dynamic linker knows that library must be loaded at runtime. </p><p>The shared library file’s full name (which usually contains additional version information not needed in the <code>SONAME</code>) is therefore normally not referenced directly. Instead, the shared library is loaded by its <code>SONAME</code>, which exists on the file system as a symlink pointing to the full name of the shared library. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The following command, when run on a shared library, will output the name to be used for the Debian package containing that shared librar
      
    
    </summary>
    
    
      <category term="linux" scheme="https://handsome-feng.github.io/1night-cs/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Snap</title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/linux/snap/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/linux/snap/</id>
    <published>2020-03-11T13:25:33.216Z</published>
    <updated>2020-03-11T13:25:33.216Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo snap ack ubuntu-core_1797.assert</span><br><span class="line">$ sudo snap install ubuntu-core_1797.snap</span><br><span class="line">$ sudo snap ack somePackage.assert</span><br><span class="line">$ sudo snap install somePackage.snap</span><br><span class="line"></span><br><span class="line">$ sudo snap install --dangerous some.snap</span><br><span class="line"></span><br><span class="line">$ sudo snap revert hello</span><br><span class="line"></span><br><span class="line">$ snap changes</span><br><span class="line">$ sudo snap abort id</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install apparmor apparmor-utils</span><br><span class="line">$ sudo mkdir -p /etc/default/grub.d</span><br><span class="line">$ echo &apos;GRUB_CMDLINE_LINUX_DEFAULT=&quot;$GRUB_CMDLINE_LINUX_DEFAULT apparmor=1 security=apparmor&quot;&apos; \</span><br><span class="line">  | sudo tee /etc/default/grub.d/apparmor.cfg</span><br><span class="line">$ sudo update-grub</span><br><span class="line">$ sudo reboot</span><br><span class="line"></span><br><span class="line">$ sudo aa-status</span><br><span class="line"></span><br><span class="line">$ ps auxZ | grep -v &apos;^unconfined&apos;</span><br></pre></td></tr></table></figure><p>$ xdelta3 -s telegram-desktop_637.snap telegram-desktop_617.snap telegram-desktop_637.snap.xdelta3</p><p>查看SELinux状态：</p><p>1、/usr/sbin/sestatus -v      ##如果SELinux status参数为enabled即为开启状态</p><p>SELinux status:                 enabled</p><p>2、getenforce                 ##也可以用这个命令检查</p><p>关闭SELinux：</p><p>1、临时关闭（不用重启机器）：</p><p>setenforce 0                  ##设置SELinux 成为permissive模式</p><p>​                              ##setenforce 1 设置SELinux 成为enforcing模式</p><p>2、修改配置文件需要重启机器：</p><p>修改/etc/selinux/config 文件</p><p>将SELINUX=enforcing改为SELINUX=disabled</p><p>重启机器即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="linux" scheme="https://handsome-feng.github.io/1night-cs/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/others/projects/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/others/projects/</id>
    <published>2020-03-11T13:25:33.216Z</published>
    <updated>2020-03-11T13:25:33.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="flatpak"><a href="#flatpak" class="headerlink" title="flatpak"></a>flatpak</h3><p>基本概念：<br><strong>运行时(runtimes)</strong>:<br>“运行时”提供应用程序所需的基本依赖。有各种各样的“运行时”,比如“Freedesktop运行时”，“GNOME运行时”。“Freedesktop运行时”包含一系列必要的库和服务，包括D-Bus, GLib, PulseAudio, X11和Wayland等。“GNOME运行时”基于“FreeDesktop运行时”，增加了一些GNOME平台相关的库，比如GStreamer,GTK+,GVFS等。必须针对运行时构建每个应用程序，并且必须在主机系统上安装此运行时才能运行应用程序。用户可以同时安装多个不同的运行时，包括不同版本的同一个运行时。</p><p>每一个运行时可以看做一个’/usr’ 文件系统，当程序运行时，它的运行时挂载在‘/usr’上。</p><p><strong>捆绑库(Bundled libraries)</strong><br>当一个程序需要的依赖不在运行时中，使用捆绑库来绑定这些依赖到程序上。</p><p><strong>SDK(软件开发套件)</strong><br>SDK也是一个“运行时”，是用于构建应用程序的特殊类型的运行时，它包含了构建和打包工具（‘devel’ parts），如头文件，编译器和调试器。通常，SDK与“运行时”配对，由应用程序使用。</p><p><strong>扩展(Extensions)</strong><br>一个扩展是对于运行时或程序的可选插件，一般用于把translations和debug信息从运行时分离出来，比如, org.freedesktop.Platform.Locale 可以追加到org.freedesktop.Platform运行时上用来添加翻译。</p><p><strong>沙箱（Sandbox）</strong><br>使用Flatpak，每个应用程序都是在孤立的环境中构建和运行的。默认情况下，应用程序只能“查看”自身及其“运行时”,访问用户文件，网络，graphics sockets，总线和设备上的子系统必须明确授予权限，访问其他内容（如其他进程）是不允许的。（可以通过Portals机制在沙箱内访问外面系统，比如打印，截图等）</p><p>Flatpak主要使用了如下技术：</p><ol><li>bubblewrap：依赖它作为沙箱的底层实现,限制了应用程序访问操作系统或用户数据的能力，并且提供了非特权用户使用容器的能力。</li><li>Systemd：将各个subsystem和cgroup树关联并挂载好，为沙箱创建 cgroups。</li><li>D-Bus, 为应用程序提供高层APIs。</li><li>使用Open Container Initiative的OCI格式作为单文件的传输格式，方便传输。</li><li>使用OSTree系统用于版本化和分发文件系统树。</li><li>使用Appstream元数据，使得Flatpak应用程序在软件中心可以完美呈现出来。</li></ol><p>附：<a href="http://www.ubuntukylin.com/news/shownews.php?lang=cn&id=664" rel="external nofollow noopener noreferrer" target="_blank">没想到你是这样的flatpak</a></p><p><strong>bubblewrap</strong> uses <code>PR_SET_NO_NEW_PRIVS</code> to turn off setuid binaries, which is the <a href="https://en.wikipedia.org/wiki/Chroot#Limitations" rel="external nofollow noopener noreferrer" target="_blank">traditional way</a> to get out of things like chroots.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* Never gain any more privs during exec */</span><br><span class="line">  if (prctl (PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) &lt; 0)</span><br></pre></td></tr></table></figure><p>bubblewrap works by <strong>creating a new, completely empty, mount namespace</strong> where the root is on a tmpfs that is invisible from the host, and will be automatically cleaned up when the last process exits.<br>bubblewrap always creates a new mount namespace, and the user can specify exactly what parts of the filesystem should be visible in the sandbox.<br>Any such directories you specify mounted <code>nodev</code> by default, and can be made readonly.</p><h4 id="namespaces"><a href="#namespaces" class="headerlink" title="namespaces"></a><strong>namespaces</strong></h4><p>目前，Linux内核里面实现了7种不同类型的namespace。</p><table><thead><tr><th align="left">名称</th><th align="left">宏定义</th><th align="left">隔离内容</th></tr></thead><tbody><tr><td align="left">Cgroup</td><td align="left">CLONE_NEWCGROUP</td><td align="left">Cgroup root directory (since Linux 4.6)</td></tr><tr><td align="left">IPC</td><td align="left">CLONE_NEWIPC</td><td align="left">System V IPC, POSIX message queues (since Linux 2.6.19)</td></tr><tr><td align="left">Network</td><td align="left">CLONE_NEWNET</td><td align="left">Network devices, stacks, ports, etc. (since Linux 2.6.24)</td></tr><tr><td align="left">Mount</td><td align="left">CLONE_NEWNS</td><td align="left">Mount points (since Linux 2.4.19)</td></tr><tr><td align="left">PID</td><td align="left">CLONE_NEWPID</td><td align="left">Process IDs (since Linux 2.6.24)</td></tr><tr><td align="left">User</td><td align="left">CLONE_NEWUSER</td><td align="left">User and group IDs (started in Linux 2.6.23 and completed in Linux 3.8)</td></tr><tr><td align="left">UTS</td><td align="left">CLONE_NEWUTS</td><td align="left">Hostname and NIS domain name (since Linux 2.6.19)</td></tr></tbody></table><p>查看当前bash进程所属的namespace: <code>ls -l /proc/$$/ns</code><br>namespace相关的函数:</p><ol><li>clone: 创建一个新的进程并把他放到新的namespace中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int clone(int (*child_func)(void *), void *child_statck, int flags, void *arg);</span><br><span class="line">flags: 指定一个或者多个上面的CLONE_NEW*(当然也可以包含跟namespace无关的flags),这样就会创建一个或多个新的不同类型的namespace,并新创建的子进程加入新创建的这些namespace中.</span><br></pre></td></tr></table></figure><ol><li>setns: 将当前进程加入到已有的namespace中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int setns(int fd, int nstype);</span><br><span class="line">fd: 指向/proc/[pid]/ns/目录里相应namespace对应的文件,表示要加入哪个namespace</span><br><span class="line">nstype: 指定nsmespace的类型:</span><br><span class="line">        1. 如果当前进程不能根据fd得到它的类型,如fd由其他进程创建,并通过UNIX domain socket传给当前进程,那么就需要通过nstype来制定fd指向的namespace的类型.</span><br><span class="line">        2. 如果进程能根据fd得到namespace类型,比如这个fd是由当前进程打开的,那么nstype设置为0即可.</span><br></pre></td></tr></table></figure><ol><li>unshare: 使当前进程退出指定类型的namespace,并加入到新创建的namespace(相当于创建并加入新的namespace)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int unshare(int flags);</span><br><span class="line">flags: 指定一个或者多个namespace类型,这样当前进程就退出了当前指定类型的namespace并加入到新创建的namespace</span><br></pre></td></tr></table></figure><p>当一个namespace中的所有进程都退出时，该namespace将会被销毁。当然还有其他方法让namespace一直存在，假设我们有一个进程号为1000的进程，以ipc namespace为例：</p><ol><li>通过mount –bind命令。例如mount –bind /proc/1000/ns/ipc /other/file，就算属于这个ipc namespace的所有进程都退出了，只要/other/file还在，这个ipc namespace就一直存在，其他进程就可以利用/other/file，通过setns函数加入到这个namespace</li><li>在其他namespace的进程中打开/proc/1000/ns/ipc文件，并一直持有这个文件描述符不关闭，以后就可以用setns函数加入这个namespace。</li></ol><h3 id="unity7"><a href="#unity7" class="headerlink" title="unity7"></a>unity7</h3><p>Compiz窗口管理器的一个插件，使用nux(opengl)图形库。部分采用cario直接绘制。<br>添加动态调整整体布局以及kylin style的锁屏和dash，通过监控gsettings设置，条件判断+工厂模式。</p><h3 id="unity8"><a href="#unity8" class="headerlink" title="unity8"></a>unity8</h3><p>The Unity 8 Desktop Preview is the new Unity 8 desktop shell running on the Mir display technology.<br>unity8(c++ + qml) + mir<br>If you want to run X11 applications that do not have native Mir support in the toolkit they use then the answer is an X11 server that runs on Mir. That could be either Xmir or Xwayland.</p><h3 id="ukui"><a href="#ukui" class="headerlink" title="ukui"></a>ukui</h3><p>会话管理器, 按照X 会话管理协议 (XSMP)<br>会话管理协议的主要部分是：</p><ol><li>会话管理器为每个客户端选择一个唯一的标识符</li><li>会话管理器需要客户端保存他们的状态</li><li>客户端指定它该如何重启以便恢复状态（例如，使用命令行来启动程序）</li></ol><h3 id="窗口管理器"><a href="#窗口管理器" class="headerlink" title="窗口管理器"></a>窗口管理器</h3><p>使用窗口管理器时，Xserver 并不直接与其它 Xclient 通信，而是通过WM中转，当一些消息被定义为WM指令时，它们会被拦截。例如 Alt+F4 关闭窗口、拖动标题栏……</p><p><strong>系统启动过程</strong>：<br>内核加载 –&gt; init程序运行 –&gt; systemd -&gt; 显示管理器运行(众多服务之一) –&gt; X Server 运行 –&gt; 显示管理器连接到 X Server，显示登录界面 –&gt; 用户登录后，登录界面关闭，加载桌面环境</p><p>从上面的流程可以看出，显示管理器是 X Server 的父进程，它负责启动 X Server，当 X Server 启动后，它又变成了 X Server 的一个 Client 程序，连接到 X Server 显示欢迎界面和登录界面，最后，显示管理器又是所有桌面环境的父进程，它负责启动桌面环境需要的其它 Client 程序。</p><p>lightdm 在启动 X Server 的时候，给 X Server 加上了 -nolisten tcp 参数，所以远程计算机就没有办法连接到 Ubuntu 的桌面了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目&quot;&gt;&lt;a href=&quot;#项目&quot; class=&quot;headerlink&quot; title=&quot;项目&quot;&gt;&lt;/a&gt;项目&lt;/h2&gt;&lt;h3 id=&quot;flatpak&quot;&gt;&lt;a href=&quot;#flatpak&quot; class=&quot;headerlink&quot; title=&quot;flatpak&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="others" scheme="https://handsome-feng.github.io/1night-cs/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://handsome-feng.github.io/1night-cs/wiki/others/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    <id>https://handsome-feng.github.io/1night-cs/wiki/others/计算机组成与设计/</id>
    <published>2020-03-11T13:25:33.216Z</published>
    <updated>2020-03-11T13:25:33.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机组成与设计"><a href="#计算机组成与设计" class="headerlink" title="计算机组成与设计"></a>计算机组成与设计</h1><h2 id="名词、术语"><a href="#名词、术语" class="headerlink" title="名词、术语"></a>名词、术语</h2><p><strong>机器零</strong>：机器数表示的零的形式，在数轴上表示为0点及其附近的一段区域</p><p><strong>浮点数规格化</strong>：</p><p><strong>串行进位</strong>：</p><p><strong>并行进位</strong>：</p><p><strong>微指令</strong>：</p><p><strong>主存存取时间</strong>：</p><p><strong>多重中断</strong>：</p><p><strong>通道控制字</strong>：</p><p><strong>总线目标设备</strong>：</p><p><strong>指令系统</strong>：</p><p><strong>定点数</strong>：</p><p><strong>微操作</strong>：</p><p><strong>外中断</strong>：</p><p><strong>通道状态字</strong>：</p><p><strong>相变型光盘</strong>：</p><p><strong>总线宽度</strong>：</p><h2 id="计算机的语言：MIPS"><a href="#计算机的语言：MIPS" class="headerlink" title="计算机的语言：MIPS"></a>计算机的语言：MIPS</h2><table><thead><tr><th>寄存器</th><th>寄存器号</th><th>用途</th><th>调用时是否保存</th></tr></thead><tbody><tr><td>$zero</td><td>0</td><td>常数0</td><td>不适用</td></tr><tr><td>$v0 - $v1</td><td>2 ~ 3</td><td>返回值</td><td>否</td></tr><tr><td>$a0 - $a3</td><td>4 ~ 7</td><td>参数</td><td>否</td></tr><tr><td>$t0 - $t7</td><td>8 ~ 15</td><td>临时变量</td><td>否</td></tr><tr><td>$s0 - $s7</td><td>16 ~ 23</td><td>对应保存的变量</td><td>是</td></tr><tr><td>$t8 - $t9</td><td>24 ~ 25</td><td>更多临时变量</td><td>否</td></tr><tr><td>$gp</td><td>28</td><td>指向静态数据区的保留寄存器</td><td>是</td></tr><tr><td>$sp</td><td>29</td><td>栈指针</td><td>是</td></tr><tr><td>$fp</td><td>30</td><td>帧指针</td><td>是</td></tr><tr><td>$ra</td><td>31</td><td>返回地址</td><td>是</td></tr><tr><td>$at</td><td>1</td><td>汇编器保留</td><td></td></tr><tr><td>$k0 - $k1</td><td>26 ~ 27</td><td>操作系统保留</td><td></td></tr></tbody></table><p>32个的理由：</p><ol><li>越小越快</li><li>指令格式位数的限制</li></ol><p>指令：</p><p>add    $s1, $s2, $s3    # $s1 = $s2 + $s3</p><p>sub    $s1, $s2, $s3    # $s1 = $s2 - $s3</p><p>addi   $s1, $s2, 20      # $s1 = $s2 + 20</p><p>补码取反加1原理：<br>$$<br>x + \bar{x} = -1 \<br>x + \bar{x} + 1 = 0 \<br>-x = \bar{x} + 1<br>$$</p><p>将有符号数作为无符号数来处理，是一种检验 0 &lt;= x &lt; y 的低开销方法，常用于检查数组的下标是否越界</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fact</span> <span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> (<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (n * fact(n - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fact:</span><br><span class="line">addi $sp, $sp, -8</span><br><span class="line">sw   $ra, 4($sp)</span><br><span class="line">sw   $a0, 0($sp)</span><br><span class="line">slti $t0, $a0, 1     # test for n &lt; 1</span><br><span class="line">beq  $t0, $zero, L1</span><br><span class="line">addi $v0, $zero, 1   # return 1</span><br><span class="line">addi $sp, $sp, 8     # pop 2 items, 本应该加载$a0和$ra，但是n&lt;1时，没有变化</span><br><span class="line">jr   $ra</span><br><span class="line">L1: addi $a0, $a0, -1</span><br><span class="line">    jal   fact           # call fact with (n - 1)</span><br><span class="line">    lw   $a0, 0($sp)     # return from jal: restore argument n</span><br><span class="line">    lw   $ra, 4($sp)</span><br><span class="line">    addi $sp, $sp, 8</span><br><span class="line">    mul  $v0, $a0, $v0   # return n * fact (n - 1)</span><br><span class="line">    jr   $ra</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算机组成与设计&quot;&gt;&lt;a href=&quot;#计算机组成与设计&quot; class=&quot;headerlink&quot; title=&quot;计算机组成与设计&quot;&gt;&lt;/a&gt;计算机组成与设计&lt;/h1&gt;&lt;h2 id=&quot;名词、术语&quot;&gt;&lt;a href=&quot;#名词、术语&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="others" scheme="https://handsome-feng.github.io/1night-cs/categories/others/"/>
    
    
  </entry>
  
</feed>
